// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: volpe.proto

package grpc_comms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VolpeContainer_SayHello_FullMethodName               = "/VolpeContainer/SayHello"
	VolpeContainer_InitFromSeed_FullMethodName           = "/VolpeContainer/InitFromSeed"
	VolpeContainer_InitFromSeedPopulation_FullMethodName = "/VolpeContainer/InitFromSeedPopulation"
	VolpeContainer_GetBestPopulation_FullMethodName      = "/VolpeContainer/GetBestPopulation"
	VolpeContainer_AdjustPopulationSize_FullMethodName   = "/VolpeContainer/AdjustPopulationSize"
	VolpeContainer_RunForGenerations_FullMethodName      = "/VolpeContainer/RunForGenerations"
)

// VolpeContainerClient is the client API for VolpeContainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type VolpeContainerClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	InitFromSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Reply, error)
	InitFromSeedPopulation(ctx context.Context, in *Population, opts ...grpc.CallOption) (*Reply, error)
	GetBestPopulation(ctx context.Context, in *PopulationSize, opts ...grpc.CallOption) (*Population, error)
	AdjustPopulationSize(ctx context.Context, in *PopulationSize, opts ...grpc.CallOption) (*Reply, error)
	RunForGenerations(ctx context.Context, in *PopulationSize, opts ...grpc.CallOption) (*Reply, error)
}

type volpeContainerClient struct {
	cc grpc.ClientConnInterface
}

func NewVolpeContainerClient(cc grpc.ClientConnInterface) VolpeContainerClient {
	return &volpeContainerClient{cc}
}

func (c *volpeContainerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, VolpeContainer_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volpeContainerClient) InitFromSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, VolpeContainer_InitFromSeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volpeContainerClient) InitFromSeedPopulation(ctx context.Context, in *Population, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, VolpeContainer_InitFromSeedPopulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volpeContainerClient) GetBestPopulation(ctx context.Context, in *PopulationSize, opts ...grpc.CallOption) (*Population, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Population)
	err := c.cc.Invoke(ctx, VolpeContainer_GetBestPopulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volpeContainerClient) AdjustPopulationSize(ctx context.Context, in *PopulationSize, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, VolpeContainer_AdjustPopulationSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volpeContainerClient) RunForGenerations(ctx context.Context, in *PopulationSize, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, VolpeContainer_RunForGenerations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolpeContainerServer is the server API for VolpeContainer service.
// All implementations must embed UnimplementedVolpeContainerServer
// for forward compatibility.
//
// The greeting service definition.
type VolpeContainerServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	InitFromSeed(context.Context, *Seed) (*Reply, error)
	InitFromSeedPopulation(context.Context, *Population) (*Reply, error)
	GetBestPopulation(context.Context, *PopulationSize) (*Population, error)
	AdjustPopulationSize(context.Context, *PopulationSize) (*Reply, error)
	RunForGenerations(context.Context, *PopulationSize) (*Reply, error)
	mustEmbedUnimplementedVolpeContainerServer()
}

// UnimplementedVolpeContainerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVolpeContainerServer struct{}

func (UnimplementedVolpeContainerServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedVolpeContainerServer) InitFromSeed(context.Context, *Seed) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFromSeed not implemented")
}
func (UnimplementedVolpeContainerServer) InitFromSeedPopulation(context.Context, *Population) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFromSeedPopulation not implemented")
}
func (UnimplementedVolpeContainerServer) GetBestPopulation(context.Context, *PopulationSize) (*Population, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestPopulation not implemented")
}
func (UnimplementedVolpeContainerServer) AdjustPopulationSize(context.Context, *PopulationSize) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustPopulationSize not implemented")
}
func (UnimplementedVolpeContainerServer) RunForGenerations(context.Context, *PopulationSize) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunForGenerations not implemented")
}
func (UnimplementedVolpeContainerServer) mustEmbedUnimplementedVolpeContainerServer() {}
func (UnimplementedVolpeContainerServer) testEmbeddedByValue()                        {}

// UnsafeVolpeContainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolpeContainerServer will
// result in compilation errors.
type UnsafeVolpeContainerServer interface {
	mustEmbedUnimplementedVolpeContainerServer()
}

func RegisterVolpeContainerServer(s grpc.ServiceRegistrar, srv VolpeContainerServer) {
	// If the following call pancis, it indicates UnimplementedVolpeContainerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VolpeContainer_ServiceDesc, srv)
}

func _VolpeContainer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolpeContainerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolpeContainer_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolpeContainerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolpeContainer_InitFromSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolpeContainerServer).InitFromSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolpeContainer_InitFromSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolpeContainerServer).InitFromSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolpeContainer_InitFromSeedPopulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Population)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolpeContainerServer).InitFromSeedPopulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolpeContainer_InitFromSeedPopulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolpeContainerServer).InitFromSeedPopulation(ctx, req.(*Population))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolpeContainer_GetBestPopulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulationSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolpeContainerServer).GetBestPopulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolpeContainer_GetBestPopulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolpeContainerServer).GetBestPopulation(ctx, req.(*PopulationSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolpeContainer_AdjustPopulationSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulationSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolpeContainerServer).AdjustPopulationSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolpeContainer_AdjustPopulationSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolpeContainerServer).AdjustPopulationSize(ctx, req.(*PopulationSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolpeContainer_RunForGenerations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulationSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolpeContainerServer).RunForGenerations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolpeContainer_RunForGenerations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolpeContainerServer).RunForGenerations(ctx, req.(*PopulationSize))
	}
	return interceptor(ctx, in, info, handler)
}

// VolpeContainer_ServiceDesc is the grpc.ServiceDesc for VolpeContainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolpeContainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VolpeContainer",
	HandlerType: (*VolpeContainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _VolpeContainer_SayHello_Handler,
		},
		{
			MethodName: "InitFromSeed",
			Handler:    _VolpeContainer_InitFromSeed_Handler,
		},
		{
			MethodName: "InitFromSeedPopulation",
			Handler:    _VolpeContainer_InitFromSeedPopulation_Handler,
		},
		{
			MethodName: "GetBestPopulation",
			Handler:    _VolpeContainer_GetBestPopulation_Handler,
		},
		{
			MethodName: "AdjustPopulationSize",
			Handler:    _VolpeContainer_AdjustPopulationSize_Handler,
		},
		{
			MethodName: "RunForGenerations",
			Handler:    _VolpeContainer_RunForGenerations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "volpe.proto",
}
