// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: volpe.proto

package volpe

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	common "volpe-framework/comms/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerID) Reset() {
	*x = WorkerID{}
	mi := &file_volpe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerID) ProtoMessage() {}

func (x *WorkerID) ProtoReflect() protoreflect.Message {
	mi := &file_volpe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerID.ProtoReflect.Descriptor instead.
func (*WorkerID) Descriptor() ([]byte, []int) {
	return file_volpe_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MasterMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// can be adjust population only
	//
	// Types that are valid to be assigned to Message:
	//
	//	*MasterMessage_AdjPop
	Message       isMasterMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterMessage) Reset() {
	*x = MasterMessage{}
	mi := &file_volpe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterMessage) ProtoMessage() {}

func (x *MasterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_volpe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterMessage.ProtoReflect.Descriptor instead.
func (*MasterMessage) Descriptor() ([]byte, []int) {
	return file_volpe_proto_rawDescGZIP(), []int{1}
}

func (x *MasterMessage) GetMessage() isMasterMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MasterMessage) GetAdjPop() *AdjustPopulationMessage {
	if x != nil {
		if x, ok := x.Message.(*MasterMessage_AdjPop); ok {
			return x.AdjPop
		}
	}
	return nil
}

type isMasterMessage_Message interface {
	isMasterMessage_Message()
}

type MasterMessage_AdjPop struct {
	AdjPop *AdjustPopulationMessage `protobuf:"bytes,1,opt,name=adjPop,proto3,oneof"`
}

func (*MasterMessage_AdjPop) isMasterMessage_Message() {}

type AdjustPopulationMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     string                 `protobuf:"bytes,1,opt,name=problemID,proto3" json:"problemID,omitempty"`
	Seed          *common.Population     `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdjustPopulationMessage) Reset() {
	*x = AdjustPopulationMessage{}
	mi := &file_volpe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdjustPopulationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustPopulationMessage) ProtoMessage() {}

func (x *AdjustPopulationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_volpe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustPopulationMessage.ProtoReflect.Descriptor instead.
func (*AdjustPopulationMessage) Descriptor() ([]byte, []int) {
	return file_volpe_proto_rawDescGZIP(), []int{2}
}

func (x *AdjustPopulationMessage) GetProblemID() string {
	if x != nil {
		return x.ProblemID
	}
	return ""
}

func (x *AdjustPopulationMessage) GetSeed() *common.Population {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *AdjustPopulationMessage) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type WorkerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// can be metrics, or subpopulation
	//
	// Types that are valid to be assigned to Message:
	//
	//	*WorkerMessage_Metrics
	//	*WorkerMessage_Population
	//	*WorkerMessage_WorkerID
	Message       isWorkerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerMessage) Reset() {
	*x = WorkerMessage{}
	mi := &file_volpe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMessage) ProtoMessage() {}

func (x *WorkerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_volpe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMessage.ProtoReflect.Descriptor instead.
func (*WorkerMessage) Descriptor() ([]byte, []int) {
	return file_volpe_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerMessage) GetMessage() isWorkerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WorkerMessage) GetMetrics() *MetricsMessage {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Metrics); ok {
			return x.Metrics
		}
	}
	return nil
}

func (x *WorkerMessage) GetPopulation() *common.Population {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Population); ok {
			return x.Population
		}
	}
	return nil
}

func (x *WorkerMessage) GetWorkerID() *WorkerID {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_WorkerID); ok {
			return x.WorkerID
		}
	}
	return nil
}

type isWorkerMessage_Message interface {
	isWorkerMessage_Message()
}

type WorkerMessage_Metrics struct {
	Metrics *MetricsMessage `protobuf:"bytes,1,opt,name=metrics,proto3,oneof"`
}

type WorkerMessage_Population struct {
	Population *common.Population `protobuf:"bytes,2,opt,name=population,proto3,oneof"`
}

type WorkerMessage_WorkerID struct {
	WorkerID *WorkerID `protobuf:"bytes,3,opt,name=workerID,proto3,oneof"`
}

func (*WorkerMessage_Metrics) isWorkerMessage_Message() {}

func (*WorkerMessage_Population) isWorkerMessage_Message() {}

func (*WorkerMessage_WorkerID) isWorkerMessage_Message() {}

type MetricsMessage struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	CpuUtil            float32                        `protobuf:"fixed32,1,opt,name=cpuUtil,proto3" json:"cpuUtil,omitempty"`
	MemUsage           float32                        `protobuf:"fixed32,2,opt,name=memUsage,proto3" json:"memUsage,omitempty"`
	MemTotal           float32                        `protobuf:"fixed32,3,opt,name=memTotal,proto3" json:"memTotal,omitempty"`
	ApplicationMetrics map[string]*ApplicationMetrics `protobuf:"bytes,4,rep,name=applicationMetrics,proto3" json:"applicationMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkerID           string                         `protobuf:"bytes,5,opt,name=workerID,proto3" json:"workerID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MetricsMessage) Reset() {
	*x = MetricsMessage{}
	mi := &file_volpe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage) ProtoMessage() {}

func (x *MetricsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_volpe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage.ProtoReflect.Descriptor instead.
func (*MetricsMessage) Descriptor() ([]byte, []int) {
	return file_volpe_proto_rawDescGZIP(), []int{4}
}

func (x *MetricsMessage) GetCpuUtil() float32 {
	if x != nil {
		return x.CpuUtil
	}
	return 0
}

func (x *MetricsMessage) GetMemUsage() float32 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

func (x *MetricsMessage) GetMemTotal() float32 {
	if x != nil {
		return x.MemTotal
	}
	return 0
}

func (x *MetricsMessage) GetApplicationMetrics() map[string]*ApplicationMetrics {
	if x != nil {
		return x.ApplicationMetrics
	}
	return nil
}

func (x *MetricsMessage) GetWorkerID() string {
	if x != nil {
		return x.WorkerID
	}
	return ""
}

type ApplicationMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuUtil       float32                `protobuf:"fixed32,1,opt,name=cpuUtil,proto3" json:"cpuUtil,omitempty"`
	MemUsage      float32                `protobuf:"fixed32,2,opt,name=memUsage,proto3" json:"memUsage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationMetrics) Reset() {
	*x = ApplicationMetrics{}
	mi := &file_volpe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationMetrics) ProtoMessage() {}

func (x *ApplicationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_volpe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationMetrics.ProtoReflect.Descriptor instead.
func (*ApplicationMetrics) Descriptor() ([]byte, []int) {
	return file_volpe_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationMetrics) GetCpuUtil() float32 {
	if x != nil {
		return x.CpuUtil
	}
	return 0
}

func (x *ApplicationMetrics) GetMemUsage() float32 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

var File_volpe_proto protoreflect.FileDescriptor

const file_volpe_proto_rawDesc = "" +
	"\n" +
	"\vvolpe.proto\x1a\fcommon.proto\"\x1a\n" +
	"\bWorkerID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"N\n" +
	"\rMasterMessage\x122\n" +
	"\x06adjPop\x18\x01 \x01(\v2\x18.AdjustPopulationMessageH\x00R\x06adjPopB\t\n" +
	"\amessage\"l\n" +
	"\x17AdjustPopulationMessage\x12\x1c\n" +
	"\tproblemID\x18\x01 \x01(\tR\tproblemID\x12\x1f\n" +
	"\x04seed\x18\x02 \x01(\v2\v.PopulationR\x04seed\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\"\x9f\x01\n" +
	"\rWorkerMessage\x12+\n" +
	"\ametrics\x18\x01 \x01(\v2\x0f.MetricsMessageH\x00R\ametrics\x12-\n" +
	"\n" +
	"population\x18\x02 \x01(\v2\v.PopulationH\x00R\n" +
	"population\x12'\n" +
	"\bworkerID\x18\x03 \x01(\v2\t.WorkerIDH\x00R\bworkerIDB\t\n" +
	"\amessage\"\xb3\x02\n" +
	"\x0eMetricsMessage\x12\x18\n" +
	"\acpuUtil\x18\x01 \x01(\x02R\acpuUtil\x12\x1a\n" +
	"\bmemUsage\x18\x02 \x01(\x02R\bmemUsage\x12\x1a\n" +
	"\bmemTotal\x18\x03 \x01(\x02R\bmemTotal\x12W\n" +
	"\x12applicationMetrics\x18\x04 \x03(\v2'.MetricsMessage.ApplicationMetricsEntryR\x12applicationMetrics\x12\x1a\n" +
	"\bworkerID\x18\x05 \x01(\tR\bworkerID\x1aZ\n" +
	"\x17ApplicationMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.ApplicationMetricsR\x05value:\x028\x01\"J\n" +
	"\x12ApplicationMetrics\x12\x18\n" +
	"\acpuUtil\x18\x01 \x01(\x02R\acpuUtil\x12\x1a\n" +
	"\bmemUsage\x18\x02 \x01(\x02R\bmemUsage2C\n" +
	"\vVolpeMaster\x124\n" +
	"\fStartStreams\x12\x0e.WorkerMessage\x1a\x0e.MasterMessage\"\x00(\x010\x01B\x0fZ\r./comms/volpeb\x06proto3"

var (
	file_volpe_proto_rawDescOnce sync.Once
	file_volpe_proto_rawDescData []byte
)

func file_volpe_proto_rawDescGZIP() []byte {
	file_volpe_proto_rawDescOnce.Do(func() {
		file_volpe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_volpe_proto_rawDesc), len(file_volpe_proto_rawDesc)))
	})
	return file_volpe_proto_rawDescData
}

var file_volpe_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_volpe_proto_goTypes = []any{
	(*WorkerID)(nil),                // 0: WorkerID
	(*MasterMessage)(nil),           // 1: MasterMessage
	(*AdjustPopulationMessage)(nil), // 2: AdjustPopulationMessage
	(*WorkerMessage)(nil),           // 3: WorkerMessage
	(*MetricsMessage)(nil),          // 4: MetricsMessage
	(*ApplicationMetrics)(nil),      // 5: ApplicationMetrics
	nil,                             // 6: MetricsMessage.ApplicationMetricsEntry
	(*common.Population)(nil),       // 7: Population
}
var file_volpe_proto_depIdxs = []int32{
	2, // 0: MasterMessage.adjPop:type_name -> AdjustPopulationMessage
	7, // 1: AdjustPopulationMessage.seed:type_name -> Population
	4, // 2: WorkerMessage.metrics:type_name -> MetricsMessage
	7, // 3: WorkerMessage.population:type_name -> Population
	0, // 4: WorkerMessage.workerID:type_name -> WorkerID
	6, // 5: MetricsMessage.applicationMetrics:type_name -> MetricsMessage.ApplicationMetricsEntry
	5, // 6: MetricsMessage.ApplicationMetricsEntry.value:type_name -> ApplicationMetrics
	3, // 7: VolpeMaster.StartStreams:input_type -> WorkerMessage
	1, // 8: VolpeMaster.StartStreams:output_type -> MasterMessage
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_volpe_proto_init() }
func file_volpe_proto_init() {
	if File_volpe_proto != nil {
		return
	}
	file_volpe_proto_msgTypes[1].OneofWrappers = []any{
		(*MasterMessage_AdjPop)(nil),
	}
	file_volpe_proto_msgTypes[3].OneofWrappers = []any{
		(*WorkerMessage_Metrics)(nil),
		(*WorkerMessage_Population)(nil),
		(*WorkerMessage_WorkerID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_volpe_proto_rawDesc), len(file_volpe_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_volpe_proto_goTypes,
		DependencyIndexes: file_volpe_proto_depIdxs,
		MessageInfos:      file_volpe_proto_msgTypes,
	}.Build()
	File_volpe_proto = out.File
	file_volpe_proto_goTypes = nil
	file_volpe_proto_depIdxs = nil
}
