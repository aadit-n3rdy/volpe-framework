# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import volpe_container_pb2 as volpe__container__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in volpe_container_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VolpeContainerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/VolpeContainer/SayHello',
                request_serializer=volpe__container__pb2.HelloRequest.SerializeToString,
                response_deserializer=volpe__container__pb2.HelloReply.FromString,
                _registered_method=True)
        self.InitFromSeed = channel.unary_unary(
                '/VolpeContainer/InitFromSeed',
                request_serializer=volpe__container__pb2.Seed.SerializeToString,
                response_deserializer=volpe__container__pb2.Reply.FromString,
                _registered_method=True)
        self.InitFromSeedPopulation = channel.unary_unary(
                '/VolpeContainer/InitFromSeedPopulation',
                request_serializer=volpe__container__pb2.Population.SerializeToString,
                response_deserializer=volpe__container__pb2.Reply.FromString,
                _registered_method=True)
        self.GetBestPopulation = channel.unary_unary(
                '/VolpeContainer/GetBestPopulation',
                request_serializer=volpe__container__pb2.PopulationSize.SerializeToString,
                response_deserializer=volpe__container__pb2.Population.FromString,
                _registered_method=True)
        self.AdjustPopulationSize = channel.unary_unary(
                '/VolpeContainer/AdjustPopulationSize',
                request_serializer=volpe__container__pb2.PopulationSize.SerializeToString,
                response_deserializer=volpe__container__pb2.Reply.FromString,
                _registered_method=True)
        self.RunForGenerations = channel.unary_unary(
                '/VolpeContainer/RunForGenerations',
                request_serializer=volpe__container__pb2.PopulationSize.SerializeToString,
                response_deserializer=volpe__container__pb2.Reply.FromString,
                _registered_method=True)


class VolpeContainerServicer(object):
    """The greeting service definition.
    """

    def SayHello(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitFromSeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitFromSeedPopulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBestPopulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustPopulationSize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunForGenerations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VolpeContainerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=volpe__container__pb2.HelloRequest.FromString,
                    response_serializer=volpe__container__pb2.HelloReply.SerializeToString,
            ),
            'InitFromSeed': grpc.unary_unary_rpc_method_handler(
                    servicer.InitFromSeed,
                    request_deserializer=volpe__container__pb2.Seed.FromString,
                    response_serializer=volpe__container__pb2.Reply.SerializeToString,
            ),
            'InitFromSeedPopulation': grpc.unary_unary_rpc_method_handler(
                    servicer.InitFromSeedPopulation,
                    request_deserializer=volpe__container__pb2.Population.FromString,
                    response_serializer=volpe__container__pb2.Reply.SerializeToString,
            ),
            'GetBestPopulation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBestPopulation,
                    request_deserializer=volpe__container__pb2.PopulationSize.FromString,
                    response_serializer=volpe__container__pb2.Population.SerializeToString,
            ),
            'AdjustPopulationSize': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustPopulationSize,
                    request_deserializer=volpe__container__pb2.PopulationSize.FromString,
                    response_serializer=volpe__container__pb2.Reply.SerializeToString,
            ),
            'RunForGenerations': grpc.unary_unary_rpc_method_handler(
                    servicer.RunForGenerations,
                    request_deserializer=volpe__container__pb2.PopulationSize.FromString,
                    response_serializer=volpe__container__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VolpeContainer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('VolpeContainer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VolpeContainer(object):
    """The greeting service definition.
    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/VolpeContainer/SayHello',
            volpe__container__pb2.HelloRequest.SerializeToString,
            volpe__container__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitFromSeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/VolpeContainer/InitFromSeed',
            volpe__container__pb2.Seed.SerializeToString,
            volpe__container__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitFromSeedPopulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/VolpeContainer/InitFromSeedPopulation',
            volpe__container__pb2.Population.SerializeToString,
            volpe__container__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBestPopulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/VolpeContainer/GetBestPopulation',
            volpe__container__pb2.PopulationSize.SerializeToString,
            volpe__container__pb2.Population.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AdjustPopulationSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/VolpeContainer/AdjustPopulationSize',
            volpe__container__pb2.PopulationSize.SerializeToString,
            volpe__container__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunForGenerations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/VolpeContainer/RunForGenerations',
            volpe__container__pb2.PopulationSize.SerializeToString,
            volpe__container__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
